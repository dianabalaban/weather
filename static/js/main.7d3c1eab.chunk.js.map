{"version":3,"sources":["Daily.js","Today.js","City.js","Home.js","App.js","index.js"],"names":["Daily","min","max","minwind","maxwind","date","datemin","datemax","hourly","data","labels","datasets","label","backgroundColor","borderColor","className","options","legend","display","pointRadius","title","text","maintainAspectRatio","scales","xAxes","stacked","ticks","beginAtZero","yAxes","stepSize","Today","temperature","x","icon","pathname","current_date","src","alt","feels_like","sunrise","sunset","wind","City","window","location","substring","useState","weather","getWeather","otherData","getOtherData","getInfo","a","fetch","response","json","list","city","useEffect","stats","id","windmin","windmax","formatDate","time_to_show","t","Date","formatted","push","getMonth","getDate","getHours","slice","getMinutes","temp","element","Math","round","length","dataArray","newArr","position","findIndex","dt","getNextDate","i","map","o","main","console","log","calculate","speed","key","Home","to","Component","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d3c1eab.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Daily = ({ min, max, minwind, maxwind, datemin, datemax, date,hourly }) => {\r\n    const data = { \r\n        labels: ['2AM','5AM','11AM','2PM','5PM','8PM', '11PM'], \r\n        datasets: [\r\n            { label: 'Temperature', data: [],backgroundColor: 'rgba(0, 0, 0, 0)', borderColor:'rgba(66, 135, 245)'}\r\n        ],}\r\n    data.datasets[0].data = [...hourly];\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h3 className=\"cardElem\">{date}</h3>\r\n       \r\n            <Line \r\n                data={data}\r\n                options={{\r\n                    legend: {\r\n                        display: false\r\n                     },\r\n                     pointRadius:0,\r\n                    title:{\r\n                        display:true,\r\n                        text:\"Temperature\"\r\n                    },\r\n                    maintainAspectRatio: true, \r\n                    scales: {\r\n                        xAxes: [{\r\n                            stacked: false,\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                //display: false\r\n                            },\r\n                        }],\r\n                        yAxes: [{\r\n                            stacked: false,\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                stepSize: 2\r\n                                //display: false \r\n                            }\r\n                        }]\r\n                    },\r\n                }}\r\n            />\r\n          \r\n           \r\n         Wind speed between {minwind} and {maxwind}\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Daily\r\n","import React from 'react';\r\n//import { Line } from 'react-chartjs-2';\r\n\r\nexport default function Today(temperature) {  \r\n    \r\n    let x = './' + temperature.icon + '.svg'\r\n    return (\r\n        <div className=\"headerContainer\">\r\n          <h1>{temperature.pathname}</h1>\r\n          <h3>{temperature.current_date[0]}</h3>\r\n          <h2>{temperature.temperature} </h2>\r\n          <img className=\"icon\"  src={x} alt=''/> \r\n          <br/>\r\n         <h4> Feels like {temperature.feels_like} | Sunrise: {temperature.sunrise[1]} | Sunset: {temperature.sunset[1]} | Wind: {temperature.wind} m/s</h4>\r\n        \r\n        </div>\r\n   \r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Daily from './Daily';\r\nimport Today from './Today';\r\n\r\nexport default function City() {\r\n\r\n        const pathname = window.location.pathname.substring(1);\r\n        const [weather, getWeather] = useState([]);\r\n        const [otherData, getOtherData] = useState([]);\r\n        const getInfo = async () => {\r\n          const response = await fetch('http://api.openweathermap.org/data/2.5/forecast?q='+ pathname+'&units=metric&appid=8f36932e2260c034d41cb86759bb3fd5'\r\n          );\r\n          const data = await response.json();\r\n          getWeather(data.list); \r\n          getOtherData(data.city);\r\n      \r\n        };\r\n        useEffect(() => { getInfo() }, []);\r\n      \r\n        let stats = [\r\n          { id:1, \r\n            min: 1, \r\n            datemin: 0,\r\n            max: 2, \r\n            datemax: 0,\r\n            windmin:0,\r\n            windmax:0,\r\n            hourly:[]\r\n          },\r\n          { id:2, \r\n            min: 0, \r\n            datemin: 0,\r\n            max: 0 ,\r\n            datemax: 0,\r\n            windmin:0,\r\n            windmax:0,\r\n            hourly:[]\r\n          },\r\n          { id:3,\r\n            min: 0, \r\n            datemin: 0,\r\n            max: 0,\r\n            datemax: 0,\r\n            windmin:0,\r\n            windmax:0,\r\n            hourly:[]\r\n          }\r\n        ]\r\n      \r\n        const formatDate = (time_to_show) => {\r\n          const t = new Date(time_to_show * 1000);\r\n          const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n          let formatted = [];\r\n          formatted.push(monthNames[t.getMonth()] + ' ' + t.getDate());\r\n          formatted.push(('0' + t.getHours()).slice(-2) + ':' + ('0' + t.getMinutes()).slice(-2));\r\n      \r\n          return formatted;\r\n        }\r\n      \r\n        const temp = (element) => { return Math.round(element) + 'Â°C' };\r\n      \r\n        const getNextDate = (dataArray) =>\r\n          dataArray.findIndex(x => formatDate(x.dt)[1] === \"02:00\");\r\n      \r\n      \r\n        const calculate = (dataArray) => {\r\n          let position = getNextDate(dataArray);\r\n          let max, min, newArr,maxwind, minwind;\r\n          for (let i = 0; i < 3; i++) {\r\n      \r\n            newArr = dataArray.slice(position, position + 8);\r\n          \r\n            position = position + 8;\r\n      \r\n            max = Math.max(...newArr.map(o => o.main.temp), 0);\r\n            min = Math.min(...newArr.map(o => o.main.temp));\r\n            stats[i].max = Math.round(max);\r\n            stats[i].min = Math.round(min);\r\n            stats[i].datemax = formatDate(newArr[newArr.findIndex(element => element.main.temp===max)].dt);\r\n            stats[i].datemin = formatDate(newArr[newArr.findIndex(element => element.main.temp===min)].dt);\r\n            stats[i].hourly = newArr.map(a => Math.round(a.main.temp))\r\n      \r\n            maxwind = Math.max(...newArr.map(o => o.main.temp), 0);\r\n            minwind = Math.min(...newArr.map(o => o.main.temp));\r\n            stats[i].windmax = maxwind + ' m/s';\r\n            stats[i].windmin = minwind + ' m/s'; \r\n      \r\n          }\r\n         console.log(stats);\r\n        }\r\n\r\n      function addClassName (){\r\n   if(pathname==='Amsterdam') {return 'ams-background'}\r\n   if(pathname==='London') {return 'lnd-background'}\r\n   if(pathname==='Paris') {return 'prs-background'}\r\n      }\r\n      \r\n    \r\n    if(weather.length) {\r\n        calculate(weather);\r\n    return (\r\n        <div className={'App '+ addClassName()}>\r\n          <div className=\"header\">\r\n         <Today temperature={temp(weather[0].main.temp)}\r\n          feels_like = {temp(weather[0].main.feels_like)} \r\n          current_date = {formatDate(weather[0].dt)} \r\n          sunset={formatDate(otherData.sunset)}\r\n          sunrise={formatDate(otherData.sunrise)}\r\n          wind = {weather[0].wind.speed}\r\n          icon = {weather[0].weather[0].icon}\r\n          pathname = {pathname}\r\n           ></Today>\r\n      \r\n      </div>\r\n      <div className=\"containerDaily\">\r\n      {stats.map(element => (\r\n        <Daily key={element.id}\r\n         max = {element.max}\r\n          min={element.min} \r\n          minwind={element.windmin}\r\n           maxwind={element.windmax}\r\n           datemin={element.datemin[1]}\r\n           datemax={element.datemax[1]}\r\n           date={element.datemin[0]}\r\n           hourly ={element.hourly}\r\n           \r\n           />\r\n      ))} </div> </div>\r\n    )} else {return ''} \r\n}\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"homepage\">\r\n                <div className=\"amsterdam\"><Link to=\"/Amsterdam\"> AMSTERDAM</Link></div>\r\n                <div className=\"paris\"><Link to=\"/Paris\"> PARIS</Link></div>\r\n                <div className=\"london\"><Link to=\"/London\"> LONDON</Link></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React  from 'react';\nimport './App.css';\nimport './Functions.js';\n//import Daily from './Daily';\n//import Today from './Today';\nimport City from './City';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route path=\"/weather\" exact component={Home} />\n        <Route path=\"/Amsterdam\" component={City} />\n        <Route path=\"/Paris\" component={City} />\n        <Route path=\"/London\" component={City} />\n      </div>\n    </Router>\n  );\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}